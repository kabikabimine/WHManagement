const moment = require('moment');
const axios = require('axios');

const totalPeople = 9; // T·ªïng s·ªë ng∆∞·ªùi
let myPosition = 9; // V·ªã tr√≠ c·ªßa b·∫°n
let startDate = moment('2024-10-08'); // Ng√†y b·∫°n ph·∫£i g·ª≠i t·ª´ ti·∫øng Anh

const telegramToken = '7797981830:AAFKv1SrdaXnDM2M-njrUOzSILR0J74P27o'; // Thay th·∫ø b·∫±ng token c·ªßa b·∫°n
const chatId = '1873755848'; // Thay th·∫ø b·∫±ng ID ng∆∞·ªùi nh·∫≠n
const weatherApiKey = 'bee715bd545c79e933d92c8b46937735'; // Thay th·∫ø b·∫±ng API key t·ª´ OpenWeatherMap
const location = 'Danang,VN'; // ƒê·ªãa ƒëi·ªÉm c·ªßa b·∫°n (VD: Hanoi, VN)

// H√†m g·ª≠i th√¥ng b√°o qua Telegram
async function sendTelegramMessage(message) {
    const url = `https://api.telegram.org/bot${telegramToken}/sendMessage`;
    try {
        await axios.post(url, {
            chat_id: chatId,
            text: message
        });
        console.log('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i qua Telegram');
    } catch (error) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o:', error);
    }
}

// H√†m t√≠nh to√°n ng√†y g·ª≠i ti·∫øp theo
function calculateNextDate(currentDate) {
    let nextDate = currentDate.clone().add(totalPeople, 'days'); // Th√™m s·ªë ng√†y b·∫±ng s·ªë ng∆∞·ªùi
    // B·ªè qua th·ª© 7 v√† ch·ªß nh·∫≠t
    while (nextDate.isoWeekday() > 5) {
        nextDate.add(1, 'days'); // N·∫øu l√† th·ª© 7 ho·∫∑c ch·ªß nh·∫≠t, th√™m m·ªôt ng√†y
    }
    return nextDate;
}

// Ki·ªÉm tra ng√†y h√¥m nay c√≥ ph·∫£i l√† ng√†y b·∫°n g·ª≠i kh√¥ng
function isTodayReminderDay() {
    const today = moment(); // L·∫•y ng√†y h√¥m nay
    return today.isSame(startDate, 'day');
}

// H√†m l·∫•y th√¥ng tin th·ªùi ti·∫øt
// H√†m l·∫•y th√¥ng tin th·ªùi ti·∫øt v√† th√™m bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt
async function getWeatherForecast() {
    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=${weatherApiKey}`;
    
    try {
        const response = await axios.get(weatherUrl);
        const data = response.data;
        const temperature = data.main.temp; // Nhi·ªát ƒë·ªô hi·ªán t·∫°i
        const weather = data.weather[0].main; // Th·ªùi ti·∫øt ch√≠nh (Rain, Clear, Clouds,...)
        
        // Bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt
        let weatherIcon = '';
        let suggestion = '';

        switch (weather) {
            case 'Rain':
                weatherIcon = 'üåßÔ∏è';
                suggestion = 'H√¥m nay tr·ªùi m∆∞a, b·∫°n n√™n mang theo √¥ ho·∫∑c √°o m∆∞a!';
                break;
            case 'Clear':
                weatherIcon = '‚òÄÔ∏è';
                suggestion = 'Tr·ªùi n·∫Øng ƒë·∫πp, b·∫°n c√≥ th·ªÉ mang √°o kho√°c ch·ªëng n·∫Øng!';
                break;
            case 'Clouds':
                weatherIcon = '‚òÅÔ∏è';
                suggestion = 'Tr·ªùi c√≥ m√¢y, nhi·ªát ƒë·ªô ·ªïn ƒë·ªãnh, kh√¥ng c·∫ßn trang b·ªã ƒë·∫∑c bi·ªát.';
                break;
            case 'Thunderstorm':
                weatherIcon = 'üå©Ô∏è';
                suggestion = 'C√≥ gi√¥ng b√£o, b·∫°n n√™n c·∫©n th·∫≠n khi ra ngo√†i!';
                break;
            case 'Drizzle':
                weatherIcon = 'üå¶Ô∏è';
                suggestion = 'C√≥ m∆∞a ph√πn, b·∫°n c√≥ th·ªÉ c·∫ßn mang theo √¥.';
                break;
            case 'Snow':
                weatherIcon = 'üå®Ô∏è';
                suggestion = 'Tr·ªùi c√≥ tuy·∫øt, b·∫°n c·∫ßn gi·ªØ ·∫•m!';
                break;
            case 'Mist':
            case 'Fog':
                weatherIcon = 'üå´Ô∏è';
                suggestion = 'C√≥ s∆∞∆°ng m√π, h√£y l√°i xe c·∫©n th·∫≠n!';
                break;
            default:
                weatherIcon = 'üå•Ô∏è';
                suggestion = `Th·ªùi ti·∫øt h√¥m nay l√† ${weather}, kh√¥ng c·∫ßn chu·∫©n b·ªã g√¨ ƒë·∫∑c bi·ªát.`;
                break;
        }
        
        return `Nhi·ªát ƒë·ªô hi·ªán t·∫°i: ${temperature}¬∞C. ${weatherIcon}\n${suggestion}`;
    } catch (error) {
        console.error('L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt:', error);
        return 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt hi·ªán t·∫°i.';
    }
}


// Bi·∫øn ghi nh·ªõ ƒë·ªÉ g·ª≠i th√¥ng b√°o m·ªôt l·∫ßn trong m·ªói khung gi·ªù
let lastSentHour = null;

// H√†m ki·ªÉm tra gi·ªù v√† g·ª≠i th√¥ng b√°o n·∫øu l√† 8h, 9h ho·∫∑c 10h s√°ng
async function checkAndSendReminder() {
    const now = moment(); // L·∫•y th·ªùi gian hi·ªán t·∫°i
    const hour = now.hour(); // L·∫•y gi·ªù hi·ªán t·∫°i

    if (isTodayReminderDay()) {
        // Ki·ªÉm tra n·∫øu gi·ªù hi·ªán t·∫°i l√† 8h, 9h ho·∫∑c 10h s√°ng v√† ch∆∞a g·ª≠i trong gi·ªù ƒë√≥
        if ((hour === 8 || hour === 9 || hour === 10) && hour !== lastSentHour) {
            const nextDate = calculateNextDate(startDate); // T√≠nh to√°n ng√†y g·ª≠i ti·∫øp theo
            const formattedNextDate = nextDate.format('DD/MM/YYYY'); // ƒê·ªãnh d·∫°ng ng√†y g·ª≠i ti·∫øp theo
            const weatherMessage = await getWeatherForecast(); // L·∫•y th√¥ng tin th·ªùi ti·∫øt
            
            const message = `H√¥m nay l√† ng√†y b·∫°n g·ª≠i t·ª´ ti·∫øng Anh! Gi·ªù hi·ªán t·∫°i: ${hour}h s√°ng.\nNg√†y g·ª≠i ti·∫øp theo c·ªßa b·∫°n l√†: ${formattedNextDate}\n\n${weatherMessage}`;
            
            // G·ª≠i th√¥ng b√°o qua Telegram
            await sendTelegramMessage(message);

            // C·∫≠p nh·∫≠t startDate th√†nh ng√†y g·ª≠i ti·∫øp theo v√† ghi nh·ªõ gi·ªù ƒë√£ g·ª≠i
            startDate = nextDate;
            lastSentHour = hour;
        }
    }

    // G·ª≠i th√¥ng b√°o th·ªùi ti·∫øt v√†o c√°c th·ªùi ƒëi·ªÉm s√°ng, tr∆∞a, chi·ªÅu, t·ªëi
    if ([7, 12, 18].includes(hour) && hour !== lastSentHour) {
        const weatherMessage = await getWeatherForecast();
        await sendTelegramMessage(`Th√¥ng b√°o th·ªùi ti·∫øt l√∫c ${hour}h, ng√†y ${now}:\n\n${weatherMessage}`);
        lastSentHour = hour;
    }
}

// L√™n l·ªãch ki·ªÉm tra m·ªói ph√∫t ƒë·ªÉ g·ª≠i th√¥ng b√°o
setInterval(checkAndSendReminder, 60 * 1000); // Ki·ªÉm tra m·ªói ph√∫t
